# coding: utf-8

"""
    Open Device Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: undefined
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device_list import DeviceList

class TestDeviceList(unittest.TestCase):
    """DeviceList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceList:
        """Test DeviceList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceList`
        """
        model = DeviceList()
        if include_optional:
            return DeviceList(
                api_version = '',
                kind = '',
                metadata = openapi_client.models.list_meta.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, ),
                items = [
                    openapi_client.models.device.Device(
                        api_version = '', 
                        kind = '', 
                        metadata = openapi_client.models.object_meta.ObjectMeta(
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            generation = 56, 
                            owner = '', 
                            annotations = {
                                'key' : ''
                                }, 
                            resource_version = '', ), 
                        spec = openapi_client.models.device_spec.DeviceSpec(
                            os = openapi_client.models.device_os_spec.DeviceOSSpec(
                                image = '', ), 
                            config = [
                                null
                                ], 
                            hooks = openapi_client.models.device_hooks_spec.DeviceHooksSpec(
                                before_updating = [
                                    openapi_client.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], 
                                        on_file = [
                                            'Create'
                                            ], 
                                        path = '', )
                                    ], 
                                after_updating = [
                                    openapi_client.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], 
                                        path = '', )
                                    ], 
                                before_rebooting = [
                                    openapi_client.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], )
                                    ], 
                                after_rebooting = [
                                    openapi_client.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], )
                                    ], ), 
                            applications = [
                                openapi_client.models.application_spec.ApplicationSpec()
                                ], 
                            systemd = openapi_client.models.device_spec_systemd.DeviceSpec_systemd(
                                match_patterns = [
                                    'ge34w9Wa*CLfoo\\yJX2gCb'
                                    ], ), 
                            resources = [
                                null
                                ], ), 
                        status = openapi_client.models.device_status.DeviceStatus(
                            conditions = [
                                openapi_client.models.condition.Condition(
                                    type = 'Approved', 
                                    status = 'True', 
                                    observed_generation = 56, 
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '', 
                                    reason = '', )
                                ], 
                            system_info = openapi_client.models.device_system_info.DeviceSystemInfo(
                                architecture = '', 
                                boot_id = '', 
                                operating_system = '', ), 
                            applications = [
                                openapi_client.models.device_application_status.DeviceApplicationStatus(
                                    name = '', 
                                    ready = '', 
                                    restarts = 56, 
                                    status = 'Preparing', )
                                ], 
                            applications_summary = openapi_client.models.device_applications_summary_status.DeviceApplicationsSummaryStatus(
                                status = 'Healthy', 
                                info = '', ), 
                            resources = openapi_client.models.device_resource_status.DeviceResourceStatus(
                                cpu = 'Healthy', 
                                memory = 'Healthy', 
                                disk = 'Healthy', ), 
                            integrity = openapi_client.models.device_integrity_status.DeviceIntegrityStatus(
                                summary = openapi_client.models.device_integrity_status_summary.DeviceIntegrityStatusSummary(
                                    status = 'Passed', 
                                    info = '', ), ), 
                            config = openapi_client.models.device_config_status.DeviceConfigStatus(
                                rendered_version = '', ), 
                            os = openapi_client.models.device_os_status.DeviceOSStatus(
                                image = '', 
                                image_digest = '', ), 
                            updated = openapi_client.models.device_updated_status.DeviceUpdatedStatus(
                                status = 'UpToDate', 
                                info = '', ), 
                            summary = openapi_client.models.device_summary_status.DeviceSummaryStatus(
                                status = 'Online', 
                                info = '', ), 
                            last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
                summary = openapi_client.models.devices_summary.DevicesSummary(
                    total = 56, 
                    application_status = {
                        'key' : 56
                        }, 
                    summary_status = {
                        'key' : 56
                        }, 
                    update_status = {
                        'key' : 56
                        }, )
            )
        else:
            return DeviceList(
                api_version = '',
                kind = '',
                metadata = openapi_client.models.list_meta.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, ),
                items = [
                    openapi_client.models.device.Device(
                        api_version = '', 
                        kind = '', 
                        metadata = openapi_client.models.object_meta.ObjectMeta(
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            generation = 56, 
                            owner = '', 
                            annotations = {
                                'key' : ''
                                }, 
                            resource_version = '', ), 
                        spec = openapi_client.models.device_spec.DeviceSpec(
                            os = openapi_client.models.device_os_spec.DeviceOSSpec(
                                image = '', ), 
                            config = [
                                null
                                ], 
                            hooks = openapi_client.models.device_hooks_spec.DeviceHooksSpec(
                                before_updating = [
                                    openapi_client.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], 
                                        on_file = [
                                            'Create'
                                            ], 
                                        path = '', )
                                    ], 
                                after_updating = [
                                    openapi_client.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], 
                                        path = '', )
                                    ], 
                                before_rebooting = [
                                    openapi_client.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], )
                                    ], 
                                after_rebooting = [
                                    openapi_client.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            openapi_client.models.hook_action.HookAction()
                                            ], )
                                    ], ), 
                            applications = [
                                openapi_client.models.application_spec.ApplicationSpec()
                                ], 
                            systemd = openapi_client.models.device_spec_systemd.DeviceSpec_systemd(
                                match_patterns = [
                                    'ge34w9Wa*CLfoo\\yJX2gCb'
                                    ], ), 
                            resources = [
                                null
                                ], ), 
                        status = openapi_client.models.device_status.DeviceStatus(
                            conditions = [
                                openapi_client.models.condition.Condition(
                                    type = 'Approved', 
                                    status = 'True', 
                                    observed_generation = 56, 
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '', 
                                    reason = '', )
                                ], 
                            system_info = openapi_client.models.device_system_info.DeviceSystemInfo(
                                architecture = '', 
                                boot_id = '', 
                                operating_system = '', ), 
                            applications = [
                                openapi_client.models.device_application_status.DeviceApplicationStatus(
                                    name = '', 
                                    ready = '', 
                                    restarts = 56, 
                                    status = 'Preparing', )
                                ], 
                            applications_summary = openapi_client.models.device_applications_summary_status.DeviceApplicationsSummaryStatus(
                                status = 'Healthy', 
                                info = '', ), 
                            resources = openapi_client.models.device_resource_status.DeviceResourceStatus(
                                cpu = 'Healthy', 
                                memory = 'Healthy', 
                                disk = 'Healthy', ), 
                            integrity = openapi_client.models.device_integrity_status.DeviceIntegrityStatus(
                                summary = openapi_client.models.device_integrity_status_summary.DeviceIntegrityStatusSummary(
                                    status = 'Passed', 
                                    info = '', ), ), 
                            config = openapi_client.models.device_config_status.DeviceConfigStatus(
                                rendered_version = '', ), 
                            os = openapi_client.models.device_os_status.DeviceOSStatus(
                                image = '', 
                                image_digest = '', ), 
                            updated = openapi_client.models.device_updated_status.DeviceUpdatedStatus(
                                status = 'UpToDate', 
                                info = '', ), 
                            summary = openapi_client.models.device_summary_status.DeviceSummaryStatus(
                                status = 'Online', 
                                info = '', ), 
                            last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
        )
        """

    def testDeviceList(self):
        """Test DeviceList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
