# coding: utf-8

"""
    Open Device Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: undefined
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.config_provider_spec import ConfigProviderSpec

class TestConfigProviderSpec(unittest.TestCase):
    """ConfigProviderSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigProviderSpec:
        """Test ConfigProviderSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigProviderSpec`
        """
        model = ConfigProviderSpec()
        if include_optional:
            return ConfigProviderSpec(
                name = '',
                git_ref = openapi_client.models.git_config_provider_spec_git_ref.GitConfigProviderSpec_gitRef(
                    repository = '', 
                    target_revision = '', 
                    path = '', 
                    mount_path = '/', ),
                secret_ref = openapi_client.models.kubernetes_secret_provider_spec_secret_ref.KubernetesSecretProviderSpec_secretRef(
                    name = '', 
                    namespace = '', 
                    mount_path = '', ),
                inline = [
                    openapi_client.models.file_spec.FileSpec(
                        path = '', 
                        content = '', 
                        content_encoding = 'plain', 
                        mode = 56, 
                        user = '', 
                        group = '', )
                    ],
                http_ref = openapi_client.models.http_config_provider_spec_http_ref.HttpConfigProviderSpec_httpRef(
                    repository = '', 
                    suffix = '', 
                    file_path = '', )
            )
        else:
            return ConfigProviderSpec(
                name = '',
                git_ref = openapi_client.models.git_config_provider_spec_git_ref.GitConfigProviderSpec_gitRef(
                    repository = '', 
                    target_revision = '', 
                    path = '', 
                    mount_path = '/', ),
                secret_ref = openapi_client.models.kubernetes_secret_provider_spec_secret_ref.KubernetesSecretProviderSpec_secretRef(
                    name = '', 
                    namespace = '', 
                    mount_path = '', ),
                inline = [
                    openapi_client.models.file_spec.FileSpec(
                        path = '', 
                        content = '', 
                        content_encoding = 'plain', 
                        mode = 56, 
                        user = '', 
                        group = '', )
                    ],
                http_ref = openapi_client.models.http_config_provider_spec_http_ref.HttpConfigProviderSpec_httpRef(
                    repository = '', 
                    suffix = '', 
                    file_path = '', ),
        )
        """

    def testConfigProviderSpec(self):
        """Test ConfigProviderSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
