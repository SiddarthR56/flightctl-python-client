# coding: utf-8

"""
    Flight Control API

    [Flight Control](https://flightctl.io) is a service for declarative management of fleets of edge devices and their workloads. 

    The version of the OpenAPI document: v1alpha1
    Contact: team@flightctl.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from flightctl.models.organization_list import OrganizationList

class TestOrganizationList(unittest.TestCase):
    """OrganizationList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrganizationList:
        """Test OrganizationList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrganizationList`
        """
        model = OrganizationList()
        if include_optional:
            return OrganizationList(
                api_version = '',
                kind = '',
                metadata = flightctl.models.list_meta.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, ),
                items = [
                    flightctl.models.organization.Organization(
                        api_version = '', 
                        kind = '', 
                        metadata = flightctl.models.object_meta.ObjectMeta(
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            generation = 56, 
                            owner = '', 
                            annotations = {
                                'key' : ''
                                }, 
                            resource_version = '', ), 
                        spec = flightctl.models.organization_spec.OrganizationSpec(
                            display_name = '', 
                            external_id = '', ), )
                    ]
            )
        else:
            return OrganizationList(
                api_version = '',
                kind = '',
                metadata = flightctl.models.list_meta.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, ),
                items = [
                    flightctl.models.organization.Organization(
                        api_version = '', 
                        kind = '', 
                        metadata = flightctl.models.object_meta.ObjectMeta(
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            generation = 56, 
                            owner = '', 
                            annotations = {
                                'key' : ''
                                }, 
                            resource_version = '', ), 
                        spec = flightctl.models.organization_spec.OrganizationSpec(
                            display_name = '', 
                            external_id = '', ), )
                    ],
        )
        """

    def testOrganizationList(self):
        """Test OrganizationList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
