# coding: utf-8

"""
    Open Device Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: undefined
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from flightctl.models.fleet import Fleet

class TestFleet(unittest.TestCase):
    """Fleet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Fleet:
        """Test Fleet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Fleet`
        """
        model = Fleet()
        if include_optional:
            return Fleet(
                api_version = '',
                kind = '',
                metadata = flightctl.models.object_meta.ObjectMeta(
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = '', 
                    labels = {
                        'key' : ''
                        }, 
                    generation = 56, 
                    owner = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    resource_version = '', ),
                spec = flightctl.models.fleet_spec.FleetSpec(
                    selector = flightctl.models.label_selector.LabelSelector(
                        match_labels = {
                            'key' : ''
                            }, 
                        match_expressions = [
                            flightctl.models.match_expression.MatchExpression(
                                key = '', 
                                operator = 'In', 
                                values = [
                                    ''
                                    ], )
                            ], ), 
                    rollout_policy = flightctl.models.rollout_policy.RolloutPolicy(
                        disruption_allowance = flightctl.models.disruption_allowance.DisruptionAllowance(
                            group_by = [
                                ''
                                ], 
                            min_available = 56, 
                            max_unavailable = 56, ), 
                        device_selection = flightctl.models.rollout_device_selection.RolloutDeviceSelection(
                            strategy = '', ), 
                        success_threshold = '', 
                        default_update_timeout = '68072888001528021798096225500h', ), 
                    template = flightctl.models.fleet_spec_template.FleetSpec_template(
                        metadata = flightctl.models.object_meta.ObjectMeta(
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            generation = 56, 
                            owner = '', 
                            annotations = {
                                'key' : ''
                                }, 
                            resource_version = '', ), 
                        spec = flightctl.models.device_spec.DeviceSpec(
                            os = flightctl.models.device_os_spec.DeviceOSSpec(
                                image = '', ), 
                            config = [
                                null
                                ], 
                            hooks = flightctl.models.device_hooks_spec.DeviceHooksSpec(
                                before_updating = [
                                    flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], 
                                        on_file = [
                                            'Create'
                                            ], 
                                        path = '', )
                                    ], 
                                after_updating = [
                                    flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], 
                                        path = '', )
                                    ], 
                                before_rebooting = [
                                    flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], )
                                    ], 
                                after_rebooting = [
                                    flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], )
                                    ], ), 
                            applications = [
                                flightctl.models.application_spec.ApplicationSpec()
                                ], 
                            systemd = flightctl.models.device_spec_systemd.DeviceSpec_systemd(
                                match_patterns = [
                                    'ge34w9Wa*CLfoo\\yJX2gCb'
                                    ], ), 
                            resources = [
                                null
                                ], ), ), ),
                status = flightctl.models.fleet_status.FleetStatus(
                    rollout = flightctl.models.fleet_rollout_status.FleetRolloutStatus(
                        current_batch = 56, ), 
                    conditions = [
                        flightctl.models.condition.Condition(
                            type = 'Approved', 
                            status = 'True', 
                            observed_generation = 56, 
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            reason = '', )
                        ], 
                    devices_summary = flightctl.models.devices_summary.DevicesSummary(
                        total = 56, 
                        application_status = {
                            'key' : 56
                            }, 
                        summary_status = {
                            'key' : 56
                            }, 
                        update_status = {
                            'key' : 56
                            }, ), )
            )
        else:
            return Fleet(
                api_version = '',
                kind = '',
                metadata = flightctl.models.object_meta.ObjectMeta(
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = '', 
                    labels = {
                        'key' : ''
                        }, 
                    generation = 56, 
                    owner = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    resource_version = '', ),
                spec = flightctl.models.fleet_spec.FleetSpec(
                    selector = flightctl.models.label_selector.LabelSelector(
                        match_labels = {
                            'key' : ''
                            }, 
                        match_expressions = [
                            flightctl.models.match_expression.MatchExpression(
                                key = '', 
                                operator = 'In', 
                                values = [
                                    ''
                                    ], )
                            ], ), 
                    rollout_policy = flightctl.models.rollout_policy.RolloutPolicy(
                        disruption_allowance = flightctl.models.disruption_allowance.DisruptionAllowance(
                            group_by = [
                                ''
                                ], 
                            min_available = 56, 
                            max_unavailable = 56, ), 
                        device_selection = flightctl.models.rollout_device_selection.RolloutDeviceSelection(
                            strategy = '', ), 
                        success_threshold = '', 
                        default_update_timeout = '68072888001528021798096225500h', ), 
                    template = flightctl.models.fleet_spec_template.FleetSpec_template(
                        metadata = flightctl.models.object_meta.ObjectMeta(
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            generation = 56, 
                            owner = '', 
                            annotations = {
                                'key' : ''
                                }, 
                            resource_version = '', ), 
                        spec = flightctl.models.device_spec.DeviceSpec(
                            os = flightctl.models.device_os_spec.DeviceOSSpec(
                                image = '', ), 
                            config = [
                                null
                                ], 
                            hooks = flightctl.models.device_hooks_spec.DeviceHooksSpec(
                                before_updating = [
                                    flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], 
                                        on_file = [
                                            'Create'
                                            ], 
                                        path = '', )
                                    ], 
                                after_updating = [
                                    flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], 
                                        path = '', )
                                    ], 
                                before_rebooting = [
                                    flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], )
                                    ], 
                                after_rebooting = [
                                    flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                        name = '', 
                                        description = '', 
                                        actions = [
                                            flightctl.models.hook_action.HookAction()
                                            ], )
                                    ], ), 
                            applications = [
                                flightctl.models.application_spec.ApplicationSpec()
                                ], 
                            systemd = flightctl.models.device_spec_systemd.DeviceSpec_systemd(
                                match_patterns = [
                                    'ge34w9Wa*CLfoo\\yJX2gCb'
                                    ], ), 
                            resources = [
                                null
                                ], ), ), ),
        )
        """

    def testFleet(self):
        """Test Fleet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
