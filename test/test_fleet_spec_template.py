# coding: utf-8

"""
    Open Device Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: undefined
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from flightctl.models.fleet_spec_template import FleetSpecTemplate

class TestFleetSpecTemplate(unittest.TestCase):
    """FleetSpecTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FleetSpecTemplate:
        """Test FleetSpecTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FleetSpecTemplate`
        """
        model = FleetSpecTemplate()
        if include_optional:
            return FleetSpecTemplate(
                metadata = flightctl.models.object_meta.ObjectMeta(
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = '', 
                    labels = {
                        'key' : ''
                        }, 
                    generation = 56, 
                    owner = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    resource_version = '', ),
                spec = flightctl.models.device_spec.DeviceSpec(
                    os = flightctl.models.device_os_spec.DeviceOSSpec(
                        image = '', ), 
                    config = [
                        null
                        ], 
                    hooks = flightctl.models.device_hooks_spec.DeviceHooksSpec(
                        before_updating = [
                            flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], 
                                on_file = [
                                    'Create'
                                    ], 
                                path = '', )
                            ], 
                        after_updating = [
                            flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], 
                                path = '', )
                            ], 
                        before_rebooting = [
                            flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], )
                            ], 
                        after_rebooting = [
                            flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], )
                            ], ), 
                    applications = [
                        flightctl.models.application_spec.ApplicationSpec()
                        ], 
                    systemd = flightctl.models.device_spec_systemd.DeviceSpec_systemd(
                        match_patterns = [
                            'ge34w9Wa*CLfoo\\yJX2gCb'
                            ], ), 
                    resources = [
                        null
                        ], )
            )
        else:
            return FleetSpecTemplate(
                spec = flightctl.models.device_spec.DeviceSpec(
                    os = flightctl.models.device_os_spec.DeviceOSSpec(
                        image = '', ), 
                    config = [
                        null
                        ], 
                    hooks = flightctl.models.device_hooks_spec.DeviceHooksSpec(
                        before_updating = [
                            flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], 
                                on_file = [
                                    'Create'
                                    ], 
                                path = '', )
                            ], 
                        after_updating = [
                            flightctl.models.device_update_hook_spec.DeviceUpdateHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], 
                                path = '', )
                            ], 
                        before_rebooting = [
                            flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], )
                            ], 
                        after_rebooting = [
                            flightctl.models.device_reboot_hook_spec.DeviceRebootHookSpec(
                                name = '', 
                                description = '', 
                                actions = [
                                    flightctl.models.hook_action.HookAction()
                                    ], )
                            ], ), 
                    applications = [
                        flightctl.models.application_spec.ApplicationSpec()
                        ], 
                    systemd = flightctl.models.device_spec_systemd.DeviceSpec_systemd(
                        match_patterns = [
                            'ge34w9Wa*CLfoo\\yJX2gCb'
                            ], ), 
                    resources = [
                        null
                        ], ),
        )
        """

    def testFleetSpecTemplate(self):
        """Test FleetSpecTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
