# coding: utf-8

"""
    Flight Control API

    [Flight Control](https://flightctl.io) is a service for declarative management of fleets of edge devices and their workloads. 

    The version of the OpenAPI document: v1alpha1
    Contact: team@flightctl.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flightctl.models.device_integrity_check_status import DeviceIntegrityCheckStatus
from flightctl.models.device_integrity_status_summary_type import DeviceIntegrityStatusSummaryType
from typing import Optional, Set
from typing_extensions import Self

class DeviceIntegrityStatus(BaseModel):
    """
    Summary status of the integrity of the device.
    """ # noqa: E501
    device_identity: Optional[DeviceIntegrityCheckStatus] = Field(default=None, alias="deviceIdentity")
    tpm: Optional[DeviceIntegrityCheckStatus] = None
    status: DeviceIntegrityStatusSummaryType
    info: Optional[StrictStr] = Field(default=None, description="Human readable information about the last integrity transition.")
    last_verified: Optional[datetime] = Field(default=None, description="Timestamp of the last integrity verification.", alias="lastVerified")
    __properties: ClassVar[List[str]] = ["deviceIdentity", "tpm", "status", "info", "lastVerified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceIntegrityStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_identity
        if self.device_identity:
            _dict['deviceIdentity'] = self.device_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tpm
        if self.tpm:
            _dict['tpm'] = self.tpm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceIntegrityStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceIdentity": DeviceIntegrityCheckStatus.from_dict(obj["deviceIdentity"]) if obj.get("deviceIdentity") is not None else None,
            "tpm": DeviceIntegrityCheckStatus.from_dict(obj["tpm"]) if obj.get("tpm") is not None else None,
            "status": obj.get("status"),
            "info": obj.get("info"),
            "lastVerified": obj.get("lastVerified")
        })
        return _obj


