# coding: utf-8

"""
    Flight Control API

    [Flight Control](https://flightctl.io) is a service for declarative management of fleets of edge devices and their workloads. 

    The version of the OpenAPI document: v1alpha1
    Contact: team@flightctl.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResourceUpdatedDetails(BaseModel):
    """
    ResourceUpdatedDetails
    """ # noqa: E501
    updated_fields: List[StrictStr] = Field(description="List of fields that were updated in the resource.", alias="updatedFields")
    previous_owner: Optional[StrictStr] = Field(default=None, description="The previous owner (if applicable).", alias="previousOwner")
    new_owner: Optional[StrictStr] = Field(default=None, description="The new owner (if applicable).", alias="newOwner")
    __properties: ClassVar[List[str]] = ["updatedFields", "previousOwner", "newOwner"]

    @field_validator('updated_fields')
    def updated_fields_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['owner', 'labels', 'spec']):
                raise ValueError("each list item must be one of ('owner', 'labels', 'spec')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceUpdatedDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if previous_owner (nullable) is None
        # and model_fields_set contains the field
        if self.previous_owner is None and "previous_owner" in self.model_fields_set:
            _dict['previousOwner'] = None

        # set to None if new_owner (nullable) is None
        # and model_fields_set contains the field
        if self.new_owner is None and "new_owner" in self.model_fields_set:
            _dict['newOwner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceUpdatedDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "updatedFields": obj.get("updatedFields"),
            "previousOwner": obj.get("previousOwner"),
            "newOwner": obj.get("newOwner")
        })
        return _obj


