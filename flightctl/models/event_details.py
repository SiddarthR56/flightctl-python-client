# coding: utf-8

"""
    Flight Control API

    [Flight Control](https://flightctl.io) is a service for declarative management of fleets of edge devices and their workloads. 

    The version of the OpenAPI document: v1alpha1
    Contact: team@flightctl.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from flightctl.models.device_multiple_owners_detected_details import DeviceMultipleOwnersDetectedDetails
from flightctl.models.device_multiple_owners_resolved_details import DeviceMultipleOwnersResolvedDetails
from flightctl.models.device_ownership_changed_details import DeviceOwnershipChangedDetails
from flightctl.models.fleet_rollout_batch_completed_details import FleetRolloutBatchCompletedDetails
from flightctl.models.fleet_rollout_batch_dispatched_details import FleetRolloutBatchDispatchedDetails
from flightctl.models.fleet_rollout_completed_details import FleetRolloutCompletedDetails
from flightctl.models.fleet_rollout_device_selected_details import FleetRolloutDeviceSelectedDetails
from flightctl.models.fleet_rollout_failed_details import FleetRolloutFailedDetails
from flightctl.models.fleet_rollout_started_details import FleetRolloutStartedDetails
from flightctl.models.internal_task_failed_details import InternalTaskFailedDetails
from flightctl.models.referenced_repository_updated_details import ReferencedRepositoryUpdatedDetails
from flightctl.models.resource_sync_completed_details import ResourceSyncCompletedDetails
from flightctl.models.resource_updated_details import ResourceUpdatedDetails
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

EVENTDETAILS_ONE_OF_SCHEMAS = ["DeviceMultipleOwnersDetectedDetails", "DeviceMultipleOwnersResolvedDetails", "DeviceOwnershipChangedDetails", "FleetRolloutBatchCompletedDetails", "FleetRolloutBatchDispatchedDetails", "FleetRolloutCompletedDetails", "FleetRolloutDeviceSelectedDetails", "FleetRolloutFailedDetails", "FleetRolloutStartedDetails", "InternalTaskFailedDetails", "ReferencedRepositoryUpdatedDetails", "ResourceSyncCompletedDetails", "ResourceUpdatedDetails"]

class EventDetails(BaseModel):
    """
    Event-specific details, structured based on event type.
    """
    # data type: ResourceUpdatedDetails
    oneof_schema_1_validator: Optional[ResourceUpdatedDetails] = None
    # data type: DeviceOwnershipChangedDetails
    oneof_schema_2_validator: Optional[DeviceOwnershipChangedDetails] = None
    # data type: DeviceMultipleOwnersDetectedDetails
    oneof_schema_3_validator: Optional[DeviceMultipleOwnersDetectedDetails] = None
    # data type: DeviceMultipleOwnersResolvedDetails
    oneof_schema_4_validator: Optional[DeviceMultipleOwnersResolvedDetails] = None
    # data type: InternalTaskFailedDetails
    oneof_schema_5_validator: Optional[InternalTaskFailedDetails] = None
    # data type: ResourceSyncCompletedDetails
    oneof_schema_6_validator: Optional[ResourceSyncCompletedDetails] = None
    # data type: ReferencedRepositoryUpdatedDetails
    oneof_schema_7_validator: Optional[ReferencedRepositoryUpdatedDetails] = None
    # data type: FleetRolloutStartedDetails
    oneof_schema_8_validator: Optional[FleetRolloutStartedDetails] = None
    # data type: FleetRolloutFailedDetails
    oneof_schema_9_validator: Optional[FleetRolloutFailedDetails] = None
    # data type: FleetRolloutCompletedDetails
    oneof_schema_10_validator: Optional[FleetRolloutCompletedDetails] = None
    # data type: FleetRolloutBatchDispatchedDetails
    oneof_schema_11_validator: Optional[FleetRolloutBatchDispatchedDetails] = None
    # data type: FleetRolloutBatchCompletedDetails
    oneof_schema_12_validator: Optional[FleetRolloutBatchCompletedDetails] = None
    # data type: FleetRolloutDeviceSelectedDetails
    oneof_schema_13_validator: Optional[FleetRolloutDeviceSelectedDetails] = None
    actual_instance: Optional[Union[DeviceMultipleOwnersDetectedDetails, DeviceMultipleOwnersResolvedDetails, DeviceOwnershipChangedDetails, FleetRolloutBatchCompletedDetails, FleetRolloutBatchDispatchedDetails, FleetRolloutCompletedDetails, FleetRolloutDeviceSelectedDetails, FleetRolloutFailedDetails, FleetRolloutStartedDetails, InternalTaskFailedDetails, ReferencedRepositoryUpdatedDetails, ResourceSyncCompletedDetails, ResourceUpdatedDetails]] = None
    one_of_schemas: Set[str] = { "DeviceMultipleOwnersDetectedDetails", "DeviceMultipleOwnersResolvedDetails", "DeviceOwnershipChangedDetails", "FleetRolloutBatchCompletedDetails", "FleetRolloutBatchDispatchedDetails", "FleetRolloutCompletedDetails", "FleetRolloutDeviceSelectedDetails", "FleetRolloutFailedDetails", "FleetRolloutStartedDetails", "InternalTaskFailedDetails", "ReferencedRepositoryUpdatedDetails", "ResourceSyncCompletedDetails", "ResourceUpdatedDetails" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = EventDetails.model_construct()
        error_messages = []
        match = 0
        # validate data type: ResourceUpdatedDetails
        if not isinstance(v, ResourceUpdatedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResourceUpdatedDetails`")
        else:
            match += 1
        # validate data type: DeviceOwnershipChangedDetails
        if not isinstance(v, DeviceOwnershipChangedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceOwnershipChangedDetails`")
        else:
            match += 1
        # validate data type: DeviceMultipleOwnersDetectedDetails
        if not isinstance(v, DeviceMultipleOwnersDetectedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceMultipleOwnersDetectedDetails`")
        else:
            match += 1
        # validate data type: DeviceMultipleOwnersResolvedDetails
        if not isinstance(v, DeviceMultipleOwnersResolvedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceMultipleOwnersResolvedDetails`")
        else:
            match += 1
        # validate data type: InternalTaskFailedDetails
        if not isinstance(v, InternalTaskFailedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InternalTaskFailedDetails`")
        else:
            match += 1
        # validate data type: ResourceSyncCompletedDetails
        if not isinstance(v, ResourceSyncCompletedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResourceSyncCompletedDetails`")
        else:
            match += 1
        # validate data type: ReferencedRepositoryUpdatedDetails
        if not isinstance(v, ReferencedRepositoryUpdatedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReferencedRepositoryUpdatedDetails`")
        else:
            match += 1
        # validate data type: FleetRolloutStartedDetails
        if not isinstance(v, FleetRolloutStartedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FleetRolloutStartedDetails`")
        else:
            match += 1
        # validate data type: FleetRolloutFailedDetails
        if not isinstance(v, FleetRolloutFailedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FleetRolloutFailedDetails`")
        else:
            match += 1
        # validate data type: FleetRolloutCompletedDetails
        if not isinstance(v, FleetRolloutCompletedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FleetRolloutCompletedDetails`")
        else:
            match += 1
        # validate data type: FleetRolloutBatchDispatchedDetails
        if not isinstance(v, FleetRolloutBatchDispatchedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FleetRolloutBatchDispatchedDetails`")
        else:
            match += 1
        # validate data type: FleetRolloutBatchCompletedDetails
        if not isinstance(v, FleetRolloutBatchCompletedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FleetRolloutBatchCompletedDetails`")
        else:
            match += 1
        # validate data type: FleetRolloutDeviceSelectedDetails
        if not isinstance(v, FleetRolloutDeviceSelectedDetails):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FleetRolloutDeviceSelectedDetails`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in EventDetails with oneOf schemas: DeviceMultipleOwnersDetectedDetails, DeviceMultipleOwnersResolvedDetails, DeviceOwnershipChangedDetails, FleetRolloutBatchCompletedDetails, FleetRolloutBatchDispatchedDetails, FleetRolloutCompletedDetails, FleetRolloutDeviceSelectedDetails, FleetRolloutFailedDetails, FleetRolloutStartedDetails, InternalTaskFailedDetails, ReferencedRepositoryUpdatedDetails, ResourceSyncCompletedDetails, ResourceUpdatedDetails. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in EventDetails with oneOf schemas: DeviceMultipleOwnersDetectedDetails, DeviceMultipleOwnersResolvedDetails, DeviceOwnershipChangedDetails, FleetRolloutBatchCompletedDetails, FleetRolloutBatchDispatchedDetails, FleetRolloutCompletedDetails, FleetRolloutDeviceSelectedDetails, FleetRolloutFailedDetails, FleetRolloutStartedDetails, InternalTaskFailedDetails, ReferencedRepositoryUpdatedDetails, ResourceSyncCompletedDetails, ResourceUpdatedDetails. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("detailType")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `detailType` in the input.")

        # check if data type is `DeviceMultipleOwnersDetectedDetails`
        if _data_type == "DeviceMultipleOwnersDetected":
            instance.actual_instance = DeviceMultipleOwnersDetectedDetails.from_json(json_str)
            return instance

        # check if data type is `DeviceMultipleOwnersResolvedDetails`
        if _data_type == "DeviceMultipleOwnersResolved":
            instance.actual_instance = DeviceMultipleOwnersResolvedDetails.from_json(json_str)
            return instance

        # check if data type is `DeviceOwnershipChangedDetails`
        if _data_type == "DeviceOwnershipChanged":
            instance.actual_instance = DeviceOwnershipChangedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutBatchCompletedDetails`
        if _data_type == "FleetRolloutBatchCompleted":
            instance.actual_instance = FleetRolloutBatchCompletedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutBatchDispatchedDetails`
        if _data_type == "FleetRolloutBatchDispatched":
            instance.actual_instance = FleetRolloutBatchDispatchedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutCompletedDetails`
        if _data_type == "FleetRolloutCompleted":
            instance.actual_instance = FleetRolloutCompletedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutDeviceSelectedDetails`
        if _data_type == "FleetRolloutDeviceSelected":
            instance.actual_instance = FleetRolloutDeviceSelectedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutFailedDetails`
        if _data_type == "FleetRolloutFailed":
            instance.actual_instance = FleetRolloutFailedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutStartedDetails`
        if _data_type == "FleetRolloutStarted":
            instance.actual_instance = FleetRolloutStartedDetails.from_json(json_str)
            return instance

        # check if data type is `InternalTaskFailedDetails`
        if _data_type == "InternalTaskFailed":
            instance.actual_instance = InternalTaskFailedDetails.from_json(json_str)
            return instance

        # check if data type is `ReferencedRepositoryUpdatedDetails`
        if _data_type == "ReferencedRepositoryUpdated":
            instance.actual_instance = ReferencedRepositoryUpdatedDetails.from_json(json_str)
            return instance

        # check if data type is `ResourceSyncCompletedDetails`
        if _data_type == "ResourceSyncCompleted":
            instance.actual_instance = ResourceSyncCompletedDetails.from_json(json_str)
            return instance

        # check if data type is `ResourceUpdatedDetails`
        if _data_type == "ResourceUpdated":
            instance.actual_instance = ResourceUpdatedDetails.from_json(json_str)
            return instance

        # check if data type is `DeviceMultipleOwnersDetectedDetails`
        if _data_type == "DeviceMultipleOwnersDetectedDetails":
            instance.actual_instance = DeviceMultipleOwnersDetectedDetails.from_json(json_str)
            return instance

        # check if data type is `DeviceMultipleOwnersResolvedDetails`
        if _data_type == "DeviceMultipleOwnersResolvedDetails":
            instance.actual_instance = DeviceMultipleOwnersResolvedDetails.from_json(json_str)
            return instance

        # check if data type is `DeviceOwnershipChangedDetails`
        if _data_type == "DeviceOwnershipChangedDetails":
            instance.actual_instance = DeviceOwnershipChangedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutBatchCompletedDetails`
        if _data_type == "FleetRolloutBatchCompletedDetails":
            instance.actual_instance = FleetRolloutBatchCompletedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutBatchDispatchedDetails`
        if _data_type == "FleetRolloutBatchDispatchedDetails":
            instance.actual_instance = FleetRolloutBatchDispatchedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutCompletedDetails`
        if _data_type == "FleetRolloutCompletedDetails":
            instance.actual_instance = FleetRolloutCompletedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutDeviceSelectedDetails`
        if _data_type == "FleetRolloutDeviceSelectedDetails":
            instance.actual_instance = FleetRolloutDeviceSelectedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutFailedDetails`
        if _data_type == "FleetRolloutFailedDetails":
            instance.actual_instance = FleetRolloutFailedDetails.from_json(json_str)
            return instance

        # check if data type is `FleetRolloutStartedDetails`
        if _data_type == "FleetRolloutStartedDetails":
            instance.actual_instance = FleetRolloutStartedDetails.from_json(json_str)
            return instance

        # check if data type is `InternalTaskFailedDetails`
        if _data_type == "InternalTaskFailedDetails":
            instance.actual_instance = InternalTaskFailedDetails.from_json(json_str)
            return instance

        # check if data type is `ReferencedRepositoryUpdatedDetails`
        if _data_type == "ReferencedRepositoryUpdatedDetails":
            instance.actual_instance = ReferencedRepositoryUpdatedDetails.from_json(json_str)
            return instance

        # check if data type is `ResourceSyncCompletedDetails`
        if _data_type == "ResourceSyncCompletedDetails":
            instance.actual_instance = ResourceSyncCompletedDetails.from_json(json_str)
            return instance

        # check if data type is `ResourceUpdatedDetails`
        if _data_type == "ResourceUpdatedDetails":
            instance.actual_instance = ResourceUpdatedDetails.from_json(json_str)
            return instance

        # deserialize data into ResourceUpdatedDetails
        try:
            instance.actual_instance = ResourceUpdatedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceOwnershipChangedDetails
        try:
            instance.actual_instance = DeviceOwnershipChangedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceMultipleOwnersDetectedDetails
        try:
            instance.actual_instance = DeviceMultipleOwnersDetectedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceMultipleOwnersResolvedDetails
        try:
            instance.actual_instance = DeviceMultipleOwnersResolvedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InternalTaskFailedDetails
        try:
            instance.actual_instance = InternalTaskFailedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ResourceSyncCompletedDetails
        try:
            instance.actual_instance = ResourceSyncCompletedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReferencedRepositoryUpdatedDetails
        try:
            instance.actual_instance = ReferencedRepositoryUpdatedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FleetRolloutStartedDetails
        try:
            instance.actual_instance = FleetRolloutStartedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FleetRolloutFailedDetails
        try:
            instance.actual_instance = FleetRolloutFailedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FleetRolloutCompletedDetails
        try:
            instance.actual_instance = FleetRolloutCompletedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FleetRolloutBatchDispatchedDetails
        try:
            instance.actual_instance = FleetRolloutBatchDispatchedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FleetRolloutBatchCompletedDetails
        try:
            instance.actual_instance = FleetRolloutBatchCompletedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FleetRolloutDeviceSelectedDetails
        try:
            instance.actual_instance = FleetRolloutDeviceSelectedDetails.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into EventDetails with oneOf schemas: DeviceMultipleOwnersDetectedDetails, DeviceMultipleOwnersResolvedDetails, DeviceOwnershipChangedDetails, FleetRolloutBatchCompletedDetails, FleetRolloutBatchDispatchedDetails, FleetRolloutCompletedDetails, FleetRolloutDeviceSelectedDetails, FleetRolloutFailedDetails, FleetRolloutStartedDetails, InternalTaskFailedDetails, ReferencedRepositoryUpdatedDetails, ResourceSyncCompletedDetails, ResourceUpdatedDetails. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into EventDetails with oneOf schemas: DeviceMultipleOwnersDetectedDetails, DeviceMultipleOwnersResolvedDetails, DeviceOwnershipChangedDetails, FleetRolloutBatchCompletedDetails, FleetRolloutBatchDispatchedDetails, FleetRolloutCompletedDetails, FleetRolloutDeviceSelectedDetails, FleetRolloutFailedDetails, FleetRolloutStartedDetails, InternalTaskFailedDetails, ReferencedRepositoryUpdatedDetails, ResourceSyncCompletedDetails, ResourceUpdatedDetails. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DeviceMultipleOwnersDetectedDetails, DeviceMultipleOwnersResolvedDetails, DeviceOwnershipChangedDetails, FleetRolloutBatchCompletedDetails, FleetRolloutBatchDispatchedDetails, FleetRolloutCompletedDetails, FleetRolloutDeviceSelectedDetails, FleetRolloutFailedDetails, FleetRolloutStartedDetails, InternalTaskFailedDetails, ReferencedRepositoryUpdatedDetails, ResourceSyncCompletedDetails, ResourceUpdatedDetails]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


