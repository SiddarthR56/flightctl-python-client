# coding: utf-8

"""
    Open Device Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: undefined
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HookActionSystemdUnit(BaseModel):
    """
    HookActionSystemdUnit
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the systemd unit on which the specified operations will be performed. This should be the exact name of the unit file, such as example.service. If the name is not populated the name will be auto discovered from the file path.")
    operations: List[StrictStr] = Field(description="The specific systemd operations to perform on the specified unit.")
    work_dir: Optional[StrictStr] = Field(default=None, description="The directory in which the executable will be run from if it is left empty it will run from the users home directory.", alias="workDir")
    __properties: ClassVar[List[str]] = ["name", "operations", "workDir"]

    @field_validator('operations')
    def operations_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Enable', 'Disable', 'Start', 'Stop', 'Restart', 'Reload', 'DaemonReload']):
                raise ValueError("each list item must be one of ('Enable', 'Disable', 'Start', 'Stop', 'Restart', 'Reload', 'DaemonReload')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HookActionSystemdUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HookActionSystemdUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "operations": obj.get("operations"),
            "workDir": obj.get("workDir")
        })
        return _obj


